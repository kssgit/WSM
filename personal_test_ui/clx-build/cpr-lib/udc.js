/// start - udc.IDS
/*
 * UDC Qualified Name: udc.IDS
 * App URI: udc/IDS
 * Source Location: udc/IDS.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/IDS", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * IDS.js
			 * Created at 2021. 12. 30. 오전 9:19:05.
			 *
			 * @author SeongSoo
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * "신규" 버튼(btnInsert)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInsertClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnInsert = e.control;
				
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd = app.getAppProperty("grd");
				
				grd.insertRow(grd.getSelectedRow(), true);
			}
			
			
			/*
			 * "삭제" 버튼(btnDelete)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDelete = e.control;
				
				/** @type cpr.controls.Grid */
				var grd = app.getAppProperty("grd");
				
				//grid 속성 확인 
				if(grd instanceof cpr.controls.Grid){
					
				}
				if(grd.type == "grid"){// 소문자 
					
				}
				
				grd.deleteRow(grd.getCheckRowIndices());
			}
			
			
			/*
			 * "저장" 버튼(btnSave)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSave = e.control;
				
				var event = new cpr.events.CMouseEvent("save");
				
				app.dispatchEvent(event);
				
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("grd", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btnInsert");
			button_1.value = "신규";
			if(typeof onBtnInsertClick == "function") {
				button_1.addEventListener("click", onBtnInsertClick);
			}
			container.addChild(button_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var button_2 = new cpr.controls.Button("btnDelete");
			button_2.value = "삭제";
			if(typeof onBtnDeleteClick == "function") {
				button_2.addEventListener("click", onBtnDeleteClick);
			}
			container.addChild(button_2, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var button_3 = new cpr.controls.Button("btnSave");
			button_3.value = "저장";
			if(typeof onBtnSaveClick == "function") {
				button_3.addEventListener("click", onBtnSaveClick);
			}
			container.addChild(button_3, {
				"colIndex": 2,
				"rowIndex": 0
			});
		}
	});
	internalApp.title = "IDS";
	
	// Type declaration for IDS
	cpr.utils.Util.ensurePackage("udc").IDS = function(id){
		cpr.controls.UDCBase.call(this, "udc.IDS", internalApp, id);
	};
	
	udc.IDS.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.IDS.prototype, "type", {
		get : function(){
			return "udc.IDS";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.IDS.prototype, "grd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grd", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.IDS
