/// start - udc.change_schedule_info
/*
 * UDC Qualified Name: udc.change_schedule_info
 * App URI: udc/change_schedule_info
 * Source Location: udc/change_schedule_info.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/change_schedule_info", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * changeworktime.js
			 * Created at 2022. 1. 7. 오전 9:25:57.
			 *
			 * @author SeongSoo
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("storeName", null);
			app.declareAppProperty("date", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-bottom-style" : "soliid",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "gray",
				"border-right-width" : "1px",
				"border-left-color" : "gray",
				"border-right-color" : "gray",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"border-radius" : "0.25rem",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-top-color" : "gray",
				"border-bottom-style" : "solid"
			});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = true;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "근무지 A";
				output_1.bind("value").toAppProperty("storeName");
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "몇월 몇일";
				output_2.bind("value").toAppProperty("date");
				container.addChild(output_2, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "100px",
				"height": "40px"
			});
		}
	});
	internalApp.title = "change_schedule_info";
	
	// Type declaration for change_schedule_info
	cpr.utils.Util.ensurePackage("udc").change_schedule_info = function(id){
		cpr.controls.UDCBase.call(this, "udc.change_schedule_info", internalApp, id);
	};
	
	udc.change_schedule_info.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.change_schedule_info.prototype, "type", {
		get : function(){
			return "udc.change_schedule_info";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.change_schedule_info.prototype, "storeName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("storeName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("storeName", newValue, true);
		}
	});
	Object.defineProperty(udc.change_schedule_info.prototype, "date", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("date");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("date", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.change_schedule_info
/// start - udc.daily_timeline
/*
 * UDC Qualified Name: udc.daily_timeline
 * App URI: udc/daily_timeline
 * Source Location: udc/daily_timeline.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/daily_timeline", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * weeklyCalendar.js
			 * Created at 2022. 1. 12. 오후 1:52:18.
			 *
			 * @author ksk19
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 530px) and (max-width: 1023px)", "timeline");
			app.supportMedia("all and (min-width: 500px) and (max-width: 529px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "black",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-left-color" : "black",
				"border-top-color" : "black",
				"border-bottom-style" : "solid",
				"border-right-color" : "black",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = true;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["1fr", "1fr", "1fr", "1fr", "1fr", "15px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "06";
				output_1.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 5
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "07";
				output_2.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"colIndex": 1,
					"rowIndex": 5
				});
				var output_3 = new cpr.controls.Output();
				output_3.value = "08";
				output_3.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"colIndex": 2,
					"rowIndex": 5
				});
				var output_4 = new cpr.controls.Output();
				output_4.value = "09";
				output_4.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_4, {
					"colIndex": 3,
					"rowIndex": 5
				});
				var output_5 = new cpr.controls.Output();
				output_5.value = "10";
				output_5.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_5, {
					"colIndex": 4,
					"rowIndex": 5
				});
				var output_6 = new cpr.controls.Output();
				output_6.value = "11";
				output_6.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_6, {
					"colIndex": 5,
					"rowIndex": 5
				});
				var output_7 = new cpr.controls.Output();
				output_7.value = "12";
				output_7.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_7, {
					"colIndex": 6,
					"rowIndex": 5
				});
				var output_8 = new cpr.controls.Output();
				output_8.value = "13";
				output_8.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_8, {
					"colIndex": 7,
					"rowIndex": 5
				});
				var output_9 = new cpr.controls.Output();
				output_9.value = "14";
				output_9.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_9, {
					"colIndex": 8,
					"rowIndex": 5
				});
				var output_10 = new cpr.controls.Output();
				output_10.value = "15";
				output_10.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_10, {
					"colIndex": 9,
					"rowIndex": 5
				});
				var output_11 = new cpr.controls.Output();
				output_11.value = "16";
				output_11.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_11, {
					"colIndex": 10,
					"rowIndex": 5
				});
				var output_12 = new cpr.controls.Output();
				output_12.value = "17";
				output_12.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_12, {
					"colIndex": 11,
					"rowIndex": 5
				});
				var output_13 = new cpr.controls.Output();
				output_13.value = "18";
				output_13.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_13, {
					"colIndex": 12,
					"rowIndex": 5
				});
				var output_14 = new cpr.controls.Output();
				output_14.value = "19";
				output_14.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_14, {
					"colIndex": 13,
					"rowIndex": 5
				});
				var output_15 = new cpr.controls.Output();
				output_15.value = "20";
				output_15.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_15, {
					"colIndex": 14,
					"rowIndex": 5
				});
				var output_16 = new cpr.controls.Output();
				output_16.value = "21";
				output_16.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_16, {
					"colIndex": 15,
					"rowIndex": 5
				});
				var output_17 = new cpr.controls.Output();
				output_17.value = "22";
				output_17.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_17, {
					"colIndex": 16,
					"rowIndex": 5
				});
				var output_18 = new cpr.controls.Output();
				output_18.value = "23";
				output_18.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_18, {
					"colIndex": 17,
					"rowIndex": 5
				});
				var output_19 = new cpr.controls.Output();
				output_19.value = "24";
				output_19.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_19, {
					"colIndex": 18,
					"rowIndex": 5
				});
				var output_20 = new cpr.controls.Output();
				output_20.value = "01";
				output_20.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_20, {
					"colIndex": 19,
					"rowIndex": 5
				});
				var output_21 = new cpr.controls.Output();
				output_21.value = "02";
				output_21.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_21, {
					"colIndex": 20,
					"rowIndex": 5
				});
				var output_22 = new cpr.controls.Output();
				output_22.value = "03";
				output_22.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_22, {
					"colIndex": 21,
					"rowIndex": 5
				});
				var output_23 = new cpr.controls.Output();
				output_23.value = "04";
				output_23.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_23, {
					"colIndex": 22,
					"rowIndex": 5
				});
				var output_24 = new cpr.controls.Output();
				output_24.value = "05";
				output_24.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_24, {
					"colIndex": 23,
					"rowIndex": 5
				});
				var output_25 = new cpr.controls.Output();
				output_25.value = "06";
				output_25.style.css({
					"font-size" : "7px",
					"text-align" : "center"
				});
				container.addChild(output_25, {
					"colIndex": 24,
					"rowIndex": 5
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "800px",
				"height": "350px",
				"left": "calc(50% - 400px)",
				"top": "calc(50% - 175px)"
			});
		}
	});
	internalApp.title = "daily_timeline";
	
	// Type declaration for daily_timeline
	cpr.utils.Util.ensurePackage("udc").daily_timeline = function(id){
		cpr.controls.UDCBase.call(this, "udc.daily_timeline", internalApp, id);
	};
	
	udc.daily_timeline.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.daily_timeline.prototype, "type", {
		get : function(){
			return "udc.daily_timeline";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.daily_timeline
/// start - udc.emp.store_tile_add
/*
 * UDC Qualified Name: udc.emp.store_tile_add
 * App URI: udc/emp/store_tile_add
 * Source Location: udc/emp/store_tile_add.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/emp/store_tile_add", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * daliy_schedule.js
			 * Created at 2022. 1. 12. 오전 9:38:30.
			 *
			 * @author ksk19
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				var udcClick =  new cpr.events.CMouseEvent("groupClick");
				app.dispatchEvent(udcClick);
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-top-style" : "soild",
				"border-top-color" : "gray",
				"top" : "0px",
				"border-right-style" : "soild",
				"left" : "0px",
				"border-left-width" : "1px",
				"border-bottom-color" : "gray",
				"border-bottom-style" : "soild",
				"border-right-color" : "gray",
				"border-left-color" : "gray",
				"border-left-style" : "soild",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"border-right-style" : "dashed",
				"border-top-width" : "1px",
				"border-bottom-color" : "gray",
				"border-right-width" : "1px",
				"border-left-color" : "gray",
				"border-right-color" : "gray",
				"border-left-width" : "1px",
				"border-top-style" : "dashed",
				"border-radius" : "0.25rem",
				"border-left-style" : "dashed",
				"border-bottom-width" : "1px",
				"border-top-color" : "gray",
				"border-bottom-style" : "dashed"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"width": "240px",
				"height": "38px",
				"left": "calc(50% - 120px)",
				"top": "calc(50% - 19px)"
			});
			
			var group_2 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = true;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "3fr"]);
			formLayout_1.setRows(["1fr"]);
			group_2.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "+";
				output_1.style.css({
					"vertical-align" : "middle",
					"font-size" : "24px",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "fill"
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "매장 추가";
				container.addChild(output_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_2);
			if(typeof onGroupClick == "function") {
				group_2.addEventListener("click", onGroupClick);
			}
			container.addChild(group_2, {
				"width": "190px",
				"height": "40px",
				"left": "calc(50% - 95px)",
				"top": "calc(50% - 20px)"
			});
		}
	});
	internalApp.title = "store_tile_add";
	
	// Type declaration for store_tile_add
	cpr.utils.Util.ensurePackage("udc.emp").store_tile_add = function(id){
		cpr.controls.UDCBase.call(this, "udc.emp.store_tile_add", internalApp, id);
	};
	
	udc.emp.store_tile_add.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.emp.store_tile_add.prototype, "type", {
		get : function(){
			return "udc.emp.store_tile_add";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.emp.store_tile_add
/// start - udc.emp.store_tile_udc
/*
 * UDC Qualified Name: udc.emp.store_tile_udc
 * App URI: udc/emp/store_tile_udc
 * Source Location: udc/emp/store_tile_udc.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/emp/store_tile_udc", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * store_udc.js
			 * Created at 2022. 1. 10. 오전 9:06:10.
			 *
			 * @author ksk19
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				SelectStoreCode.setStoreCode(app.getAppProperty("storecode"));
				var checkBox = app.lookup("cbx1");
				 if(checkBox.checked){
				 	checkBox.checked = false;
				 	group.style.css("background-color", "");
				 	group.style.css("border-left-color", "#00EC98");
				 }else{
				 	checkBox.checked = true;
				 	group.style.css("background-color", "#E1F1FF");
				 	group.style.css("border-left-color", "#004BB6");
				 }
				 var udcClick =  new cpr.events.CMouseEvent("udcClick");
				 app.dispatchEvent(udcClick);
				 
			}
			
			
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var checkBox = app.lookup("cbx1");
				var group = app.lookup("grp");
				var selected = app.getAppProperty("selected");
				if(selected ){ // 해제 
				 	checkBox.checked = false;
				 	group.style.css("background-color", "");
				 	group.style.css("border-left-color", "#00EC98");
				 }else{ // 클릭
				 	checkBox.checked = true;
				 	group.style.css("background-color", "#E1F1FF");
				 	group.style.css("border-left-color", "#004BB6");
				 }
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("storeName", null);
			app.declareAppProperty("managerName", null);
			app.declareAppProperty("ptjCount", null);
			app.declareAppProperty("storeCategory", null);
			app.declareAppProperty("selected", null);
			app.declareAppProperty("storecode", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp");
			group_1.style.setClasses(["post-it-udc"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "Output";
				output_1.bind("value").toAppProperty("storeName");
				container.addChild(output_1, {
					"top": "9px",
					"left": "2px",
					"width": "191px",
					"height": "20px"
				});
				var checkBox_1 = new cpr.controls.CheckBox("cbx1");
				checkBox_1.visible = false;
				checkBox_1.value = "false";
				checkBox_1.trueValue = "true";
				checkBox_1.falseValue = "false";
				checkBox_1.style.setClasses(["check-box"]);
				if(typeof onCbx1ValueChange == "function") {
					checkBox_1.addEventListener("value-change", onCbx1ValueChange);
				}
				container.addChild(checkBox_1, {
					"top": "9px",
					"left": "203px",
					"width": "29px",
					"height": "20px"
				});
			})(group_1);
			if(typeof onGroupDblclick == "function") {
				group_1.addEventListener("dblclick", onGroupDblclick);
			}
			if(typeof onGroupClick == "function") {
				group_1.addEventListener("click", onGroupClick);
			}
			container.addChild(group_1, {
				"width": "240px",
				"height": "38px",
				"left": "calc(50% - 120px)",
				"top": "calc(50% - 19px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "store_tile_udc";
	
	// Type declaration for store_tile_udc
	cpr.utils.Util.ensurePackage("udc.emp").store_tile_udc = function(id){
		cpr.controls.UDCBase.call(this, "udc.emp.store_tile_udc", internalApp, id);
	};
	
	udc.emp.store_tile_udc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.emp.store_tile_udc.prototype, "type", {
		get : function(){
			return "udc.emp.store_tile_udc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.emp.store_tile_udc.prototype, "storeName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("storeName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("storeName", newValue, true);
		}
	});
	Object.defineProperty(udc.emp.store_tile_udc.prototype, "managerName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("managerName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("managerName", newValue, true);
		}
	});
	Object.defineProperty(udc.emp.store_tile_udc.prototype, "ptjCount", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ptjCount");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ptjCount", newValue, true);
		}
	});
	Object.defineProperty(udc.emp.store_tile_udc.prototype, "storeCategory", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("storeCategory");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("storeCategory", newValue, true);
		}
	});
	Object.defineProperty(udc.emp.store_tile_udc.prototype, "selected", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("selected");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("selected", newValue, true);
		}
	});
	Object.defineProperty(udc.emp.store_tile_udc.prototype, "storecode", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("storecode");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("storecode", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.emp.store_tile_udc
/// start - udc.ptj.daliy_schedule
/*
 * UDC Qualified Name: udc.ptj.daliy_schedule
 * App URI: udc/ptj/daliy_schedule
 * Source Location: udc/ptj/daliy_schedule.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ptj/daliy_schedule", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * daliy_schedule.js
			 * Created at 2022. 1. 12. 오전 9:38:30.
			 *
			 * @author ksk19
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				var scheduleClick =  new cpr.events.CMouseEvent("scheduleClick");
				app.dispatchEvent(scheduleClick);
			}
			
			
			/*
			 * 그룹에서 mouseenter 이벤트 발생 시 호출.
			 * 마우스 포인터가 컨트롤 위에 진입할 때 발생하는 이벤트.
			 */
			function onGroupMouseenter(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				group.style.css({
					"background-color" : "whiteSmoke"
				})
			}
			
			
			/*
			 * 그룹에서 mouseleave 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 및 컨트롤의 자식 영역 바깥으로 마우스 포인터를 이동할 때 발생하는 이벤트.
			 */
			function onGroupMouseleave(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				group.style.css({
					"background-color" : ""
				})
			}
			
			
			/*
			 * 그룹에서 mousedown 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 위에 포인터를 위치한 상태로 마우스 버튼을 누를 때 발생하는 이벤트.
			 */
			function onGroupMousedown(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				group.style.css({
					"background-color" : "lightGray"
				})
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("storeName", null);
			app.declareAppProperty("workStartDt", null);
			app.declareAppProperty("workEndDt", null);
			app.declareAppProperty("dailyWage", null);
			app.declareAppProperty("workedHour", null);
			app.declareAppProperty("linkedCheck", null);
			app.declareAppProperty("storeCode", null);
			app.declareAppProperty("breaktime", null);
			app.declareAppProperty("scheduleCode", null);
			app.declareAppProperty("workEndDate", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-top-style" : "soild",
				"border-top-color" : "gray",
				"top" : "0px",
				"border-right-style" : "soild",
				"left" : "0px",
				"border-left-width" : "1px",
				"border-bottom-color" : "gray",
				"border-bottom-style" : "soild",
				"border-right-color" : "gray",
				"border-left-color" : "gray",
				"border-left-style" : "soild",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["schedule-udc"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "근무지 이름";
				output_1.style.setClasses(["font-store-title"]);
				output_1.style.css({
					"text-align" : "center"
				});
				output_1.bind("value").toAppProperty("storeName");
				container.addChild(output_1, {
					"top": "6px",
					"width": "168px",
					"height": "34px",
					"left": "calc(50% - 84px)"
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "~";
				output_2.style.css({
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"top": "51px",
					"width": "12px",
					"height": "20px",
					"left": "calc(50% - 6px)"
				});
				var maskEditor_1 = new cpr.controls.MaskEditor("mse1");
				maskEditor_1.readOnly = true;
				maskEditor_1.mask = "00:00";
				maskEditor_1.style.css({
					"border-right-style" : "none",
					"background-color" : "transparent",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "none",
					"border-top-style" : "none",
					"text-align" : "center"
				});
				maskEditor_1.bind("value").toAppProperty("workStartDt");
				container.addChild(maskEditor_1, {
					"top": "51px",
					"left": "125px",
					"width": "68px",
					"height": "20px"
				});
				var maskEditor_2 = new cpr.controls.MaskEditor("mse2");
				maskEditor_2.readOnly = true;
				maskEditor_2.mask = "00:00";
				maskEditor_2.style.css({
					"border-right-style" : "none",
					"background-color" : "transparent",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "none",
					"border-top-style" : "none",
					"text-align" : "center"
				});
				maskEditor_2.bind("value").toAppProperty("workEndDt");
				container.addChild(maskEditor_2, {
					"top": "51px",
					"left": "203px",
					"width": "68px",
					"height": "20px"
				});
			})(group_1);
			if(typeof onGroupClick == "function") {
				group_1.addEventListener("click", onGroupClick);
			}
			if(typeof onGroupMouseenter == "function") {
				group_1.addEventListener("mouseenter", onGroupMouseenter);
			}
			if(typeof onGroupMouseleave == "function") {
				group_1.addEventListener("mouseleave", onGroupMouseleave);
			}
			if(typeof onGroupMousedown == "function") {
				group_1.addEventListener("mousedown", onGroupMousedown);
			}
			container.addChild(group_1, {
				"width": "400px",
				"height": "80px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 40px)"
			});
		}
	});
	internalApp.title = "daliy_schedule";
	
	// Type declaration for daliy_schedule
	cpr.utils.Util.ensurePackage("udc.ptj").daliy_schedule = function(id){
		cpr.controls.UDCBase.call(this, "udc.ptj.daliy_schedule", internalApp, id);
	};
	
	udc.ptj.daliy_schedule.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "type", {
		get : function(){
			return "udc.ptj.daliy_schedule";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "storeName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("storeName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("storeName", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "workStartDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("workStartDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("workStartDt", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "workEndDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("workEndDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("workEndDt", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "dailyWage", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dailyWage");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dailyWage", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "workedHour", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("workedHour");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("workedHour", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "linkedCheck", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("linkedCheck");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("linkedCheck", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "storeCode", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("storeCode");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("storeCode", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "breaktime", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("breaktime");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("breaktime", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "scheduleCode", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("scheduleCode");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("scheduleCode", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule.prototype, "workEndDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("workEndDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("workEndDate", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ptj.daliy_schedule
/// start - udc.ptj.daliy_schedule_add
/*
 * UDC Qualified Name: udc.ptj.daliy_schedule_add
 * App URI: udc/ptj/daliy_schedule_add
 * Source Location: udc/ptj/daliy_schedule_add.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ptj/daliy_schedule_add", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * daliy_schedule.js
			 * Created at 2022. 1. 12. 오전 9:38:30.
			 *
			 * @author ksk19
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
			//	var udcClick =  new cpr.events.CMouseEvent("groupClick");
			//	app.dispatchEvent(udcClick);
			}
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				var udcClick =  new cpr.events.CMouseEvent("groupClick");
				app.dispatchEvent(udcClick);
			}
			
			
			
			/*
			 * 그룹에서 mouseenter 이벤트 발생 시 호출.
			 * 마우스 포인터가 컨트롤 위에 진입할 때 발생하는 이벤트.
			 */
			function onGroupMouseenter(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				group.style.css({
					"background-color" : "whiteSmoke"
				})
			}
			
			
			/*
			 * 그룹에서 mouseleave 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 및 컨트롤의 자식 영역 바깥으로 마우스 포인터를 이동할 때 발생하는 이벤트.
			 */
			function onGroupMouseleave(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				group.style.css({
					"background-color" : ""
				})
			}
			
			/*
			 * 그룹에서 mousedown 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 위에 포인터를 위치한 상태로 마우스 버튼을 누를 때 발생하는 이벤트.
			 */
			function onGroupMousedown(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				group.style.css({
					"background-color" : "lightGray"
				})
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("workingHour", null);
			app.declareAppProperty("storeName", null);
			app.declareAppProperty("dailyWage", null);
			app.declareAppProperty("workedHour", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-top-style" : "soild",
				"border-top-color" : "gray",
				"top" : "0px",
				"border-right-style" : "soild",
				"left" : "0px",
				"border-left-width" : "1px",
				"border-bottom-color" : "gray",
				"border-bottom-style" : "soild",
				"border-right-color" : "gray",
				"border-left-color" : "gray",
				"border-left-style" : "soild",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["schedule-udc"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container();
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = true;
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.setColumns(["1fr", "3fr"]);
				formLayout_1.setRows(["1fr"]);
				group_2.setLayout(formLayout_1);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "+";
					output_1.style.css({
						"vertical-align" : "middle",
						"font-size" : "24px",
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"horizontalAlign": "fill"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "근무 추가하기";
					container.addChild(output_2, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_2);
				if(typeof onGroupClick == "function") {
					group_2.addEventListener("click", onGroupClick);
				}
				container.addChild(group_2, {
					"width": "200px",
					"height": "40px",
					"left": "calc(50% - 100px)",
					"top": "calc(50% - 20px)"
				});
			})(group_1);
			if(typeof onGroupClick2 == "function") {
				group_1.addEventListener("click", onGroupClick2);
			}
			if(typeof onGroupMouseenter == "function") {
				group_1.addEventListener("mouseenter", onGroupMouseenter);
			}
			if(typeof onGroupMouseleave == "function") {
				group_1.addEventListener("mouseleave", onGroupMouseleave);
			}
			if(typeof onGroupMouseup == "function") {
				group_1.addEventListener("mouseup", onGroupMouseup);
			}
			if(typeof onGroupMousedown == "function") {
				group_1.addEventListener("mousedown", onGroupMousedown);
			}
			container.addChild(group_1, {
				"width": "400px",
				"height": "80px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 40px)"
			});
		}
	});
	internalApp.title = "daliy_schedule_add";
	
	// Type declaration for daliy_schedule_add
	cpr.utils.Util.ensurePackage("udc.ptj").daliy_schedule_add = function(id){
		cpr.controls.UDCBase.call(this, "udc.ptj.daliy_schedule_add", internalApp, id);
	};
	
	udc.ptj.daliy_schedule_add.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ptj.daliy_schedule_add.prototype, "type", {
		get : function(){
			return "udc.ptj.daliy_schedule_add";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ptj.daliy_schedule_add.prototype, "workingHour", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("workingHour");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("workingHour", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule_add.prototype, "storeName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("storeName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("storeName", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule_add.prototype, "dailyWage", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dailyWage");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dailyWage", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.daliy_schedule_add.prototype, "workedHour", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("workedHour");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("workedHour", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ptj.daliy_schedule_add
/// start - udc.ptj.ptj_list_udc
/*
 * UDC Qualified Name: udc.ptj.ptj_list_udc
 * App URI: udc/ptj/ptj_list_udc
 * Source Location: udc/ptj/ptj_list_udc.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ptj/ptj_list_udc", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * ptj_list_udc.js
			 * Created at 2022. 1. 12. 오후 4:24:43.
			 *
			 * @author SeongSoo
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
				
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("ptj_name", null);
			app.declareAppProperty("store_name", null);
			app.declareAppProperty("link", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-right-style" : "solid",
				"top" : "0px",
				"border-top-style" : "solid",
				"left" : "0px",
				"border-left-width" : "1px",
				"border-left-style" : "solid",
				"border-radius" : "0.5rem",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["100px", "100px", "100px"]);
			formLayout_1.setRows(["1fr", "1fr", "1fr", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "직원 이름";
			output_1.style.css({
				"text-align" : "center"
			});
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 1,
				"rowSpan": 1
			});
			
			var output_2 = new cpr.controls.Output("qw");
			output_2.value = "매장 이름";
			output_2.style.css({
				"text-align" : "center"
			});
			container.addChild(output_2, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 1
			});
			
			var output_3 = new cpr.controls.Output();
			output_3.value = "연결 여부";
			output_3.style.css({
				"text-align" : "center"
			});
			container.addChild(output_3, {
				"colIndex": 0,
				"rowIndex": 2,
				"colSpan": 1,
				"rowSpan": 1
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "수정";
			container.addChild(button_1, {
				"colIndex": 1,
				"rowIndex": 3
			});
			
			var output_4 = new cpr.controls.Output();
			output_4.value = "Output";
			output_4.style.css({
				"text-align" : "center"
			});
			output_4.bind("value").toAppProperty("link");
			container.addChild(output_4, {
				"colIndex": 1,
				"rowIndex": 2,
				"colSpan": 2,
				"rowSpan": 1
			});
			
			var output_5 = new cpr.controls.Output();
			output_5.value = "Output";
			output_5.style.css({
				"text-align" : "center"
			});
			output_5.bind("value").toAppProperty("store_name");
			container.addChild(output_5, {
				"colIndex": 1,
				"rowIndex": 1,
				"colSpan": 2,
				"rowSpan": 1
			});
			
			var output_6 = new cpr.controls.Output();
			output_6.value = "Output";
			output_6.style.css({
				"text-align" : "center"
			});
			output_6.bind("value").toAppProperty("ptj_name");
			container.addChild(output_6, {
				"colIndex": 1,
				"rowIndex": 0,
				"colSpan": 2,
				"rowSpan": 1
			});
		}
	});
	internalApp.title = "ptj_list_udc";
	
	// Type declaration for ptj_list_udc
	cpr.utils.Util.ensurePackage("udc.ptj").ptj_list_udc = function(id){
		cpr.controls.UDCBase.call(this, "udc.ptj.ptj_list_udc", internalApp, id);
	};
	
	udc.ptj.ptj_list_udc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ptj.ptj_list_udc.prototype, "type", {
		get : function(){
			return "udc.ptj.ptj_list_udc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ptj.ptj_list_udc.prototype, "ptj_name", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ptj_name");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ptj_name", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.ptj_list_udc.prototype, "store_name", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("store_name");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("store_name", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.ptj_list_udc.prototype, "link", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("link");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("link", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ptj.ptj_list_udc
/// start - udc.ptj.search_store
/*
 * UDC Qualified Name: udc.ptj.search_store
 * App URI: udc/ptj/search_store
 * Source Location: udc/ptj/search_store.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ptj/search_store", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * storeSearch.js
			 * Created at 2022. 1. 5. 오전 10:21:32.
			 *
			 * @author ksk19
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var group = e.control;
				var udcClick =  new cpr.events.CMouseEvent("selectStore");
				app.dispatchEvent(udcClick);
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("storeName", "업체명");
			app.declareAppProperty("managerName", "관리자");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "antiqueWhite",
				"background-image" : "none"
			});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "10px";
			formLayout_1.rightMargin = "10px";
			formLayout_1.bottomMargin = "10px";
			formLayout_1.leftMargin = "10px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "2fr"]);
			formLayout_1.setRows(["2fr", "2fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.style.css({
					"border-right-style" : "dotted",
					"border-top-width" : "1px",
					"border-bottom-color" : "gray",
					"border-right-width" : "1px",
					"border-left-color" : "gray",
					"border-right-color" : "gray",
					"border-left-width" : "1px",
					"border-top-style" : "dotted",
					"background-color" : "linen",
					"border-left-style" : "dotted",
					"border-bottom-width" : "1px",
					"border-top-color" : "gray",
					"border-bottom-style" : "dotted",
					"background-image" : "none",
					"text-align" : "center"
				});
				output_1.bind("value").toAppProperty("storeName");
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output();
				output_2.style.css({
					"border-right-style" : "dotted",
					"border-top-width" : "1px",
					"border-bottom-color" : "gray",
					"border-right-width" : "1px",
					"border-left-color" : "gray",
					"border-right-color" : "gray",
					"border-left-width" : "1px",
					"border-top-style" : "dotted",
					"background-color" : "linen",
					"border-left-style" : "dotted",
					"border-bottom-width" : "1px",
					"border-top-color" : "gray",
					"border-bottom-style" : "dotted",
					"background-image" : "none",
					"text-align" : "center"
				});
				output_2.bind("value").toAppProperty("managerName");
				container.addChild(output_2, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var output_3 = new cpr.controls.Output();
				output_3.value = "업체명";
				output_3.style.css({
					"border-right-style" : "dotted",
					"border-top-width" : "1px",
					"border-bottom-color" : "gray",
					"border-right-width" : "1px",
					"border-left-color" : "gray",
					"border-right-color" : "gray",
					"border-left-width" : "1px",
					"border-top-style" : "dotted",
					"background-color" : "linen",
					"border-left-style" : "dotted",
					"border-bottom-width" : "1px",
					"border-top-color" : "gray",
					"border-bottom-style" : "dotted",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_4 = new cpr.controls.Output();
				output_4.value = "고용주";
				output_4.style.css({
					"border-right-style" : "dotted",
					"border-top-width" : "1px",
					"border-bottom-color" : "gray",
					"border-right-width" : "1px",
					"border-left-color" : "gray",
					"border-right-color" : "gray",
					"border-left-width" : "1px",
					"border-top-style" : "dotted",
					"background-color" : "linen",
					"border-left-style" : "dotted",
					"border-bottom-width" : "1px",
					"border-top-color" : "gray",
					"border-bottom-style" : "dotted",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_4, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_1);
			if(typeof onGroupClick == "function") {
				group_1.addEventListener("click", onGroupClick);
			}
			container.addChild(group_1, {
				"autoSize": "both",
				"width": "400px",
				"height": "100px"
			});
		}
	});
	internalApp.title = "search_store";
	
	// Type declaration for search_store
	cpr.utils.Util.ensurePackage("udc.ptj").search_store = function(id){
		cpr.controls.UDCBase.call(this, "udc.ptj.search_store", internalApp, id);
	};
	
	udc.ptj.search_store.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ptj.search_store.prototype, "type", {
		get : function(){
			return "udc.ptj.search_store";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ptj.search_store.prototype, "storeName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("storeName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("storeName", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.search_store.prototype, "managerName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("managerName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("managerName", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ptj.search_store
/// start - udc.ptj.wpm
/*
 * UDC Qualified Name: udc.ptj.wpm
 * App URI: udc/ptj/wpm
 * Source Location: udc/ptj/wpm.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ptj/wpm", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * wpm.js
			 * Created at 2022. 1. 4. 오후 12:28:23.
			 *
			 * @author SeongSoo
			 ************************************************/
			
			var start;
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var event = new cpr.events.CMouseEvent("delete");
				/*이벤트를 전파합니다.*/
				app.dispatchEvent(event);
				
			}
			
			
			
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbx1ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.CheckBox
				 */
				var cbx1 = e.control;
				var grp = app.lookup("grp");
				if(start){//처음 setting 될 때 선택 되지 않도록
					/** @type String */
					var keyName = app.getAppProperty("store_code");
					if(cbx1.checked){
						//로컬스토리지
						localStorage.setItem(keyName,app.getAppProperty("store_code"));
						
						var color = app.getAppProperty("wp_color");
						if(color != null){
							grp.style.css("border-left-color",color);
						}else{
							grp.style.css("border-left-color","#28D094");
						}
					}else{
			
						//로컬스토리지
						localStorage.removeItem(keyName);	
							grp.style.css("border-left-color","none");
					}
				}
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				start = false;
				var cbx1 = app.lookup("cbx1");
				var grp = app.lookup("grp");
				if(cbx1.checked){
					
					//로컬스토리지
					var keyName = app.getAppProperty("store_code");
					localStorage.setItem(keyName, app.getAppProperty("store_code"));
					var color = app.getAppProperty("wp_color");
					if(color != null){
						grp.style.css("border-left-color",color);
					}else{
						grp.style.css("border-left-color","#28D094");
					}
					
				}else{
			
					//로컬스토리지
					localStorage.removeItem(keyName);
					grp.style.css("border-left-color"," none");
				}
				start = true;
			}
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var button = e.control;
				var cbx = app.lookup("cbx1");
				if(cbx.checked){
					cbx.checked = false;
				}else{
					cbx.checked = true;
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("wp_name", "기본값");
			app.declareAppProperty("store_code", null);
			app.declareAppProperty("select", null);
			app.declareAppProperty("wp_color", null);
			var dataMap_1 = new cpr.data.DataMap("dmDeleteStore");
			dataMap_1.parseData({
				"columns" : [
					{"name": "STORE_CODE"},
					{"name": "USER_NUMBER"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("smsDeleteStore");
			submission_1.addRequestData(dataMap_1);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp");
			group_1.style.setClasses(["work-place"]);
			group_1.style.css({
				"box-shadow" : "none"
			});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = true;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "100px", "40px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button();
				button_1.value = "삭제";
				button_1.style.setClasses(["btn-danger"]);
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0,
					"horizontalAlign": "center",
					"verticalAlign": "center",
					"width": 40,
					"height": 70
				});
				var group_2 = new cpr.controls.Container();
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = true;
				formLayout_2.horizontalSpacing = "0px";
				formLayout_2.verticalSpacing = "0px";
				formLayout_2.setColumns(["1fr", "100px"]);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var checkBox_1 = new cpr.controls.CheckBox("cbx1");
					checkBox_1.visible = false;
					checkBox_1.value = "";
					checkBox_1.falseValue = "false";
					checkBox_1.text = "";
					checkBox_1.style.setClasses(["check-box"]);
					checkBox_1.bind("value").toAppProperty("select");
					if(typeof onCbx1Click == "function") {
						checkBox_1.addEventListener("click", onCbx1Click);
					}
					if(typeof onCbx1ValueChange == "function") {
						checkBox_1.addEventListener("value-change", onCbx1ValueChange);
					}
					container.addChild(checkBox_1, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var output_1 = new cpr.controls.Output();
					output_1.value = "근무지 A";
					output_1.style.setClasses(["store-name"]);
					output_1.style.css({
						"text-align" : "center"
					});
					output_1.bind("value").toAppProperty("wp_name");
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
				})(group_2);
				if(typeof onGroupClick == "function") {
					group_2.addEventListener("click", onGroupClick);
				}
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 2,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "360px",
				"height": "72px",
				"left": "calc(50% - 180px)",
				"top": "calc(50% - 36px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "근무지/매장";
	
	// Type declaration for wpm
	cpr.utils.Util.ensurePackage("udc.ptj").wpm = function(id){
		cpr.controls.UDCBase.call(this, "udc.ptj.wpm", internalApp, id);
	};
	
	udc.ptj.wpm.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ptj.wpm.prototype, "type", {
		get : function(){
			return "udc.ptj.wpm";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ptj.wpm.prototype, "wp_name", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("wp_name");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("wp_name", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.wpm.prototype, "store_code", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("store_code");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("store_code", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.wpm.prototype, "select", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("select");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("select", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.wpm.prototype, "wp_color", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("wp_color");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("wp_color", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ptj.wpm
/// start - udc.ptj.wpm2
/*
 * UDC Qualified Name: udc.ptj.wpm2
 * App URI: udc/ptj/wpm2
 * Source Location: udc/ptj/wpm2.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ptj/wpm2", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			app.declareAppProperty("wp_name", "기본값");
			app.declareAppProperty("store_code", null);
			app.declareAppProperty("select", null);
			app.declareAppProperty("wp_color", null);
			var dataMap_1 = new cpr.data.DataMap("dmDeleteStore");
			dataMap_1.parseData({
				"columns" : [
					{"name": "STORE_CODE"},
					{"name": "USER_NUMBER"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("smsDeleteStore");
			submission_1.addRequestData(dataMap_1);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp");
			group_1.style.setClasses(["work-place"]);
			group_1.style.css({
				"box-shadow" : "none"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "근무지 A";
				output_1.style.setClasses(["store-name"]);
				output_1.bind("value").toAppProperty("wp_name");
				container.addChild(output_1, {
					"width": "100px",
					"height": "20px",
					"left": "calc(50% - 50px)",
					"top": "calc(50% - 10px)"
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "삭제";
				button_1.style.setClasses(["btn-danger"]);
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"right": "10px",
					"width": "66px",
					"height": "20px",
					"top": "calc(50% - 10px)"
				});
				var checkBox_1 = new cpr.controls.CheckBox("cbx1");
				checkBox_1.value = "";
				checkBox_1.falseValue = "false";
				checkBox_1.text = "";
				checkBox_1.style.setClasses(["check-box"]);
				checkBox_1.bind("value").toAppProperty("select");
				if(typeof onCbx1Click == "function") {
					checkBox_1.addEventListener("click", onCbx1Click);
				}
				if(typeof onCbx1ValueChange == "function") {
					checkBox_1.addEventListener("value-change", onCbx1ValueChange);
				}
				container.addChild(checkBox_1, {
					"left": "237px",
					"width": "22px",
					"height": "25px",
					"top": "calc(50% - 12px)"
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "Button";
				if(typeof onButtonClick2 == "function") {
					button_2.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_2, {
					"top": "23px",
					"left": "20px",
					"width": "100px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "360px",
				"height": "72px",
				"left": "calc(50% - 180px)",
				"top": "calc(50% - 36px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "근무지/매장";
	
	// Type declaration for wpm2
	cpr.utils.Util.ensurePackage("udc.ptj").wpm2 = function(id){
		cpr.controls.UDCBase.call(this, "udc.ptj.wpm2", internalApp, id);
	};
	
	udc.ptj.wpm2.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ptj.wpm2.prototype, "type", {
		get : function(){
			return "udc.ptj.wpm2";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ptj.wpm2.prototype, "wp_name", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("wp_name");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("wp_name", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.wpm2.prototype, "store_code", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("store_code");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("store_code", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.wpm2.prototype, "select", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("select");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("select", newValue, true);
		}
	});
	Object.defineProperty(udc.ptj.wpm2.prototype, "wp_color", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("wp_color");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("wp_color", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ptj.wpm2
/// start - udc.todayJop
/*
 * UDC Qualified Name: udc.todayJop
 * App URI: udc/todayJop
 * Source Location: udc/todayJop.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/todayJop", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * todayJop.js
			 * Created at 2022. 1. 5. 오전 10:27:23.
			 *
			 * @author SeongSoo
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("wherejob", null);
			app.declareAppProperty("start_time", null);
			app.declareAppProperty("end_time", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-form-group"]);
			container.style.css({
				"border-bottom-width" : "1px",
				"border-right-style" : "solid",
				"border-top-color" : "gray",
				"top" : "0px",
				"border-top-style" : "solid",
				"border-radius" : "0.25rem",
				"left" : "0px",
				"border-left-width" : "1px",
				"border-left-style" : "solid",
				"border-bottom-color" : "gray",
				"border-right-color" : "gray",
				"border-bottom-style" : "solid",
				"border-left-color" : "gray",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["70px", "10px", "70px"]);
			formLayout_1.setRows(["19px", "19px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "근무지";
			output_1.style.css({
				"text-align" : "center"
			});
			output_1.bind("value").toAppProperty("wherejob");
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 3,
				"rowSpan": 1
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "시작 시간";
			output_2.style.css({
				"text-align" : "center"
			});
			output_2.bind("value").toAppProperty("start_time");
			container.addChild(output_2, {
				"colIndex": 0,
				"rowIndex": 1
			});
			
			var output_3 = new cpr.controls.Output();
			output_3.value = "종료 시간";
			output_3.style.css({
				"text-align" : "center"
			});
			output_3.bind("value").toAppProperty("end_time");
			container.addChild(output_3, {
				"colIndex": 2,
				"rowIndex": 1
			});
			
			var output_4 = new cpr.controls.Output();
			output_4.value = "~";
			output_4.style.css({
				"text-align" : "center"
			});
			container.addChild(output_4, {
				"colIndex": 1,
				"rowIndex": 1
			});
		}
	});
	internalApp.title = "todayJop";
	
	// Type declaration for todayJop
	cpr.utils.Util.ensurePackage("udc").todayJop = function(id){
		cpr.controls.UDCBase.call(this, "udc.todayJop", internalApp, id);
	};
	
	udc.todayJop.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.todayJop.prototype, "type", {
		get : function(){
			return "udc.todayJop";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.todayJop.prototype, "wherejob", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("wherejob");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("wherejob", newValue, true);
		}
	});
	Object.defineProperty(udc.todayJop.prototype, "start_time", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("start_time");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("start_time", newValue, true);
		}
	});
	Object.defineProperty(udc.todayJop.prototype, "end_time", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("end_time");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("end_time", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.todayJop
