/// start - udc.crudUDC
/*
 * UDC Qualified Name: udc.crudUDC
 * App URI: udc/crudUDC
 * Source Location: udc/crudUDC.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/crudUDC", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * crudUDC.js
			 * Created at 2022. 1. 4. 오후 3:36:45.
			 *
			 * @author SeongSoo
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["100px", "100px", "100px"]);
			formLayout_1.setRows(["30px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "신규";
			container.addChild(button_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "삭제";
			container.addChild(button_2, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "저장";
			container.addChild(button_3, {
				"colIndex": 2,
				"rowIndex": 0
			});
		}
	});
	internalApp.title = "crudUDC";
	
	// Type declaration for crudUDC
	cpr.utils.Util.ensurePackage("udc").crudUDC = function(id){
		cpr.controls.UDCBase.call(this, "udc.crudUDC", internalApp, id);
	};
	
	udc.crudUDC.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.crudUDC.prototype, "type", {
		get : function(){
			return "udc.crudUDC";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.crudUDC
/// start - udc.todayJop
/*
 * UDC Qualified Name: udc.todayJop
 * App URI: udc/todayJop
 * Source Location: udc/todayJop.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/todayJop", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * todayJop.js
			 * Created at 2022. 1. 5. 오전 10:27:23.
			 *
			 * @author SeongSoo
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("wherejob", null);
			app.declareAppProperty("start_time", null);
			app.declareAppProperty("end_time", null);
			app.declareAppProperty("total_time", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "근무지";
			output_1.bind("value").toAppProperty("wherejob");
			container.addChild(output_1, {
				"width": "100px",
				"height": "20px"
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "시작 시간";
			output_2.bind("value").toAppProperty("start_time");
			container.addChild(output_2, {
				"width": "100px",
				"height": "20px"
			});
			
			var output_3 = new cpr.controls.Output();
			output_3.value = "종료 시간";
			output_3.bind("value").toAppProperty("end_time");
			container.addChild(output_3, {
				"width": "100px",
				"height": "20px"
			});
			
			var output_4 = new cpr.controls.Output();
			output_4.value = "총 근무 시간";
			output_4.bind("value").toAppProperty("total_time");
			container.addChild(output_4, {
				"width": "100px",
				"height": "20px"
			});
		}
	});
	internalApp.title = "todayJop";
	
	// Type declaration for todayJop
	cpr.utils.Util.ensurePackage("udc").todayJop = function(id){
		cpr.controls.UDCBase.call(this, "udc.todayJop", internalApp, id);
	};
	
	udc.todayJop.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.todayJop.prototype, "type", {
		get : function(){
			return "udc.todayJop";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.todayJop.prototype, "wherejob", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("wherejob");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("wherejob", newValue, true);
		}
	});
	Object.defineProperty(udc.todayJop.prototype, "start_time", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("start_time");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("start_time", newValue, true);
		}
	});
	Object.defineProperty(udc.todayJop.prototype, "end_time", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("end_time");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("end_time", newValue, true);
		}
	});
	Object.defineProperty(udc.todayJop.prototype, "total_time", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("total_time");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("total_time", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.todayJop
/// start - udc.wpm
/*
 * UDC Qualified Name: udc.wpm
 * App URI: udc/wpm
 * Source Location: udc/wpm.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/wpm", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * wpm.js
			 * Created at 2022. 1. 4. 오후 12:28:23.
			 *
			 * @author SeongSoo
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				alert("정말 삭제하시겠습니까?")
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("wp_name", "기본값");
			app.declareAppProperty("link", false);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "수정";
			container.addChild(button_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"right": "20px",
						"bottom": "20px",
						"width": "100px",
						"height": "20px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"right": "10px",
						"bottom": "20px",
						"width": "49px",
						"height": "20px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"right": "7px",
						"bottom": "20px",
						"width": "34px",
						"height": "20px"
					}
				]
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.value = "근무지 A";
			output_1.bind("value").toAppProperty("wp_name");
			container.addChild(output_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"left": "20px",
						"width": "100px",
						"height": "20px",
						"top": "calc(50% - 10px)"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"left": "10px",
						"width": "49px",
						"height": "20px",
						"top": "calc(50% - 10px)"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"left": "7px",
						"width": "34px",
						"height": "20px",
						"top": "calc(50% - 10px)"
					}
				]
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "<!-- Rounded switch -->\r\n<label class=\"switch\">\r\n  <input type=\"checkbox\">\r\n  <span class=\"slider round\"><\/span>\r\n<\/label>\r\n\r\n<style>\r\n.switch {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 20px;\r\n}\r\n\r\n.switch input { \r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n.slider {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #ccc;\r\n  -webkit-transition: .4s;\r\n  transition: .4s;\r\n}\r\n\r\n.slider:before {\r\n  position: absolute;\r\n  content: \"\";\r\n  height: 18px;\r\n  width: 18px;\r\n  left: 4px;\r\n  bottom: 01px;\r\n  background-color: white;\r\n  -webkit-transition: .4s;\r\n  transition: .4s;\r\n}\r\n\r\ninput:checked + .slider {\r\n  background-color: #2196F3;\r\n}\r\n\r\ninput:focus + .slider {\r\n  box-shadow: 0 0 1px #2196F3;\r\n}\r\n\r\ninput:checked + .slider:before {\r\n  -webkit-transform: translateX(26px);\r\n  -ms-transform: translateX(26px);\r\n  transform: translateX(26px);\r\n}\r\n\r\n/* Rounded sliders */\r\n.slider.round {\r\n  border-radius: 20px;\r\n}\r\n\r\n.slider.round:before {\r\n  border-radius: 50%;\r\n}\r\n<\/style>";
			container.addChild(hTMLSnippet_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"width": "100px",
						"height": "20px",
						"left": "calc(50% - 50px)",
						"top": "calc(50% - 10px)"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"width": "49px",
						"height": "20px",
						"left": "calc(50% - 24px)",
						"top": "calc(50% - 10px)"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"width": "34px",
						"height": "20px",
						"left": "calc(50% - 17px)",
						"top": "calc(50% - 10px)"
					}
				]
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "삭제";
			if(typeof onButtonClick == "function") {
				button_2.addEventListener("click", onButtonClick);
			}
			container.addChild(button_2, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "20px",
						"right": "20px",
						"width": "100px",
						"height": "20px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"top": "20px",
						"right": "10px",
						"width": "49px",
						"height": "20px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"top": "20px",
						"right": "7px",
						"width": "34px",
						"height": "20px"
					}
				]
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "고용주 연결";
			output_2.style.css({
				"text-align" : "center"
			});
			output_2.bind("value").toAppProperty("link");
			container.addChild(output_2, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "70px",
						"left": "20px",
						"width": "100px",
						"height": "20px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"top": "70px",
						"left": "10px",
						"width": "49px",
						"height": "20px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"top": "70px",
						"left": "7px",
						"width": "34px",
						"height": "20px"
					}
				]
			});
		}
	});
	internalApp.title = "wpm";
	
	// Type declaration for wpm
	cpr.utils.Util.ensurePackage("udc").wpm = function(id){
		cpr.controls.UDCBase.call(this, "udc.wpm", internalApp, id);
	};
	
	udc.wpm.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.wpm.prototype, "type", {
		get : function(){
			return "udc.wpm";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.wpm.prototype, "wp_name", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("wp_name");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("wp_name", newValue, true);
		}
	});
	Object.defineProperty(udc.wpm.prototype, "link", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("link");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("link", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.wpm
