<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="emp">
	
	<!-- 고용주 직원 스케줄 정보 조회-->
	<select id="storeSchedule" resultType="hashmap">
		SELECT
			s.all_day as allDay,
			s.breaktime,
			s.schedule_code as id,
			s.store_code,
			u.NAME as label,
			s.user_code_emp,
			s.user_code_ptj,
			pt.color as class,
			s.work_begin_time as beginDt,
			DATE_FORMAT(s.work_date, '%Y%m%d') as start,
			s.work_end_time as endDt,
			DATE_FORMAT(s.work_begin_time, '%H:%i') as startTime,
			DATE_FORMAT(s.work_end_time, '%H:%i') as endTime
		FROM (schedule s JOIN part_timer pt 
			ON s.store_code = pt.store_code AND s.user_code_ptj = pt.user_code_ptj  ) JOIN USER u 
			ON u.user_number = s.user_code_ptj 
		<trim prefix="WHERE" prefixOverrides="AND |OR">
			<!-- 현재 재직중인 근무자와 고용주가 등록한 매장의 스케줄만 조회 -->
			<if test="USER_CODE_EMP != null and USER_CODE_EMP !=''"> user_code_emp = #{USER_CODE_EMP} AND pt.resignation !='N' AND s.store_code IN (SELECT st.store_code FROM store st WHERE st.emp_email = #{USER_CODE_EMP})</if>
			<!-- 선택한 날에대한 스케줄 정보 조회 -->
			<if test="WORK_DATE != null and WORK_DATE !=''">AND work_date = #{WORK_DATE}</if>
			<!-- 선택한 매장에 대한 스케줄 정보 조회 -->
			<if test="STROE_CODE != null and STROE_CODE !=''">AND store_code = #{STROE_CODE}</if>
		</trim>
	</select>
	
	<!-- storeList -->
	<select id="storeList" resultType="hashmap">
		SELECT
			store_name,
			store_code,
			business_type_small,
			business_type_large
		FROM store
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<!-- 고용주가 자신의 매장 리스트 조회 -->
			<if test="USER_NUMBER_EMP != null and USER_NUMBER_EMP !=''"> USER_NUMBER_EMP = #{USER_NUMBER_EMP}</if>
			<!-- 직원이 고용주의 매장 리스트를 조회 -->
			<if test="USER_EMAIL != null and USER_EMAIL != '' "> 
				emp_email =  #{USER_EMAIL} 
				AND store_code NOT IN
					(SELECT store_code FROM part_timer WHERE user_code_ptj = #{user_code_ptj})
			</if>
		</trim>
		
	</select>
	
	<!-- Add Store -->
	<insert id="addStore">
		INSERT INTO store(
			store_name,
			USER_NUMBER_EMP,
			business_type_small,
			business_type_large,
			emp_email
		)VALUES(
			#{store_name},
			#{USER_NUMBER_EMP},
			#{business_type_small},
			#{business_type_large},
			#{USER_EMAIL}
		)
	</insert>
	
	<!-- 직원 목록  -->
	<select id="ptjList" resultType="hashmap">
		SELECT 
			  pt.PTJ_CODE
			, u.NAME 
			, u.EMAIL 
			, u.USER_CALL
			, u.BIRTHDATE 
			, s.STORE_NAME
			, pt.PAY_KIND
			, pt.UNIT_PAY
			, pt.COLOR
			, pt.PAY_DAY
			, pt.TAX_STAT
			, pt.ROLE 
			, pt.LINK_STAT
			, u.USER_NUMBER
			, s.STORE_CODE
			<!-- 해당 직원의 당월 근무 총시간 -->
			, IFNULL((
				SELECT
				sum(DATE_FORMAT(TIMEDIFF(work_end_time, work_begin_time) , '%H:%i'))
				FROM schedule sch
				WHERE user_code_ptj = u.USER_NUMBER AND sch.store_code =  s.store_code 
				),0 )AS TOTAL_WORK_HOUR <!-- 근무 시간 계산 -->
		FROM 
			(part_timer pt JOIN store s ON pt.store_code =s.store_code) 
			JOIN `user` u ON user_code_ptj =  u.USER_NUMBER
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<!-- 직원 목록 전체 조회(해당 고용주에 매장에 속하고 재직중인 직원) -->
			<if test="USER_NUMBER != null and USER_NUMBER != '' ">s.USER_NUMBER_EMP = #{USER_NUMBER} AND pt.LINK_STAT = 'Y' AND pt.resignation = 'Y'</if>
			<!-- 직원 이름으로 검색 -->
			<if test="PTJ_NAME != null and PTJ_NAME != '' ">AND u.NAME LIKE CONCAT('%',#{PTJ_NAME},'%')</if>
			<!-- 매장별 조회 -->
			<if test="STORE_CODE != null and STORE_CODE != '' ">AND pt.store_code = #{STORE_CODE}</if>
		</trim>

	</select>
	
	
	<!-- 매장 연결을 요청한 직원의 정보 -->
	<select id="linkReqList" resultType="hashmap">
		 select 
			  pt.PTJ_CODE
			, u.USER_NUMBER 
			, s.STORE_NAME
			, u.NAME 
			, pt.PTJ_CALL AS USER_CALL 
			, DATE_FORMAT(u.BIRTHDATE  , '%Y-%m-%d') BIRTHDATE
			, pt.LINK_STAT
			, pt.GENDER 
			, s.STORE_CODE
			, pt.USER_CODE_PTJ
			, pt.role
		FROM 
			(part_timer pt JOIN `user` u ON pt.user_code_ptj = u.USER_NUMBER) JOIN store s ON pt.store_code = s.store_code 
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<!-- 조회하는 고용주의 매장에 해당하는 요청만 조회 -->
			<if test="USER_NUMBER != null and USER_NUMBER != '' ">s.USER_NUMBER_EMP = #{USER_NUMBER} AND link_stat ='N'</if>
			<!-- 매장 코드로 조회 -->
			<if test="STORE_CODE != null and STORE_CODE != '' ">AND pt.STORE_CODE = #{STORE_CODE} </if>
			<!-- 사원 이름으로 조회 -->
			<if test="PTJ_NAME != null and PTJ_NAME != '' ">AND pt.USER_CODE_PTJ IN (SELECT USER_NUMBER FROM USER WHERE NAME LIKE CONCAT('%',#{PTJ_NAME},'%'))</if>
		</trim>
	</select>
	
	<!--매장 연결 승인  -->
	<update id="ptjLinkRequest">
		UPDATE part_timer SET
			link_stat = 'Y'
			<if test="color != null and color != '' ">,color = #{color}</if>
			<if test="role !=null and role != '' ">,ROLE = #{role}</if>
		WHERE ptj_code = #{PTJ_CODE}
	</update>
	
	<!-- 메장 연결 요청 거절  -->
	<delete id="deleteLinkRequest">
		DELETE 
		FROM part_timer 
		WHERE PTJ_CODE = #{PTJ_CODE}
	</delete>
	
	<!-- 매장,직원별 총 근무시간 workHour  -->
	<select id="workHour" resultType="Int">
		SELECT
			sum(DATE_FORMAT(TIMEDIFF(work_end_time, work_begin_time) , '%H:%i'))
		FROM schedule s 
		WHERE user_code_ptj = #{USER_NUMBER} AND store_code = #{STORE_CODE}
	</select>
	
	
	<!-- getschedule 매장,직원 검색기간 별 스케줄 일정 불러오기  -->
	<select id="getschedule" resultType="hashmap">
		SELECT
			  u.NAME as PTJ_NAME
			, DATE_FORMAT(WORK_DATE , '%Y%m%d') AS WORK_DATE
			, DATE_FORMAT(work_begin_time , '%H%i') AS WORK_BEGIN_TIME
			, DATE_FORMAT(work_end_time , '%H%i') AS WORK_END_TIME
			, DATE_FORMAT(WORK_END_DATE , '%Y%m%d') AS WORK_END_DATE
			, BREAKTIME
			, st.STORE_NAME
			, s.STORE_CODE
			, SCHEDULE_CODE
			, USER_CODE_PTJ
			, USER_CODE_EMP
			,(SELECT color FROM request_schedule WHERE ud_schedule_number = s.SCHEDULE_CODE AND(ACCEPT_EMP !='D' AND ACCEPT_PTJ != 'D') ) AS Class
		FROM (schedule s JOIN user u ON s.USER_CODE_PTJ = u.user_number ) JOIN store st ON s.store_code = st.store_code
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<!-- 시작일만 있을 경우 시작일 이후의 스케줄 가져오기 -->
			<if test="(DT_BEGIN != null and DT_BEGIN != '') and (DT_END == null or DT_END == '' ) ">work_date <![CDATA[ >= ]]> #{DT_BEGIN}  AND</if>
			<!-- 종료일만 있을 경우 종료일보다 전의 스케줄 가져오기 -->
			<if test="(DT_BEGIN == null or DT_BEGIN == '') and (DT_END != null and DT_END != '' ) ">work_date <![CDATA[ <= ]]> #{DT_END}  AND</if>
			<!-- 둘다 있을 경우 -->
			<if test="(DT_BEGIN != null and DT_BEGIN != '') and (DT_END != null and DT_END != '' ) ">work_date between #{DT_BEGIN} AND #{DT_END} AND  </if>
			<if test="USER_NUMBER != null and USER_NUMBER != '' ">user_code_ptj = #{USER_NUMBER} AND s.store_code = #{STORE_CODE}</if>
		</trim>
		ORDER BY work_begin_time
	</select>
	
	
	
	<!-- 고용주 근무 추가 변경 삭제 요청 -->
	<insert id="reqScheduleWork">
		INSERT INTO request_schedule(
			store_code,
			user_code_emp,
			user_code_ptj,
			work_date,
			work_end_date,
			work_begin_time,
			work_end_time,
			breaktime,
			accept_emp,
			accept_ptj,
			dc
			<!-- 변경, 삭제 -->
			<if test="SCHEDULE_CODE != null and SCHEDULE_CODE != '' ">,ud_schedule_number,COLOR</if>
		)VALUES(
			#{STORE_CODE},
			#{USER_CODE_EMP},
			#{USER_CODE_PTJ},
			#{WORK_DATE},
			<!-- 종료날짜가 입력이 않되었을 경우 시작일과 동일한 날로 입력 -->
			<if test="WORK_END_DATE == null or WORK_END_DATE == '' ">#{WORK_DATE},</if>
			<if test="WORK_END_DATE != null and WORK_END_DATE != '' ">#{WORK_END_DATE},</if>
			#{WORK_BEGIN_TIME},
			#{WORK_END_TIME},
			#{BREAKTIME},
			"Y",
			"N",
			#{DC}
			<if test="SCHEDULE_CODE != null and SCHEDULE_CODE != ''">,#{SCHEDULE_CODE},#{COLOR}</if>
		)
	</insert>
	
	<!-- 삭제 중복 요청을 막기위한 쿼리  -->
	<select id="shcedule_exists" resultType="Integer">
		SELECT EXISTS
		(SELECT 
				reqschedule_number
			FROM request_schedule
			WHERE ud_schedule_number = #{SCHEDULE_CODE} AND user_code_emp = #{USER_CODE_EMP} AND dc = "D" AND (ACCEPT_EMP !='D' AND ACCEPT_PTJ != 'D')
			LIMIT 1) AS SUCCESS
	</select>
	
	
	<!-- 고용주가 승인 거절한 요청 업데이트 -->
	<update id="deniedRequest">
		UPDATE REQUEST_SCHEDULE SET
			ACCEPT_EMP = #{ACCEPT_EMP},
			UPDATE_DATE = sysdate()
		WHERE reqschedule_number = #{REQ_CODE}
	</update>
	
	<!-- 고용주가 승인한 요청목록 삭제, 고용주가 삭제 -->
	<delete id="deleteReqScheduleChage">
		DELETE
		FROM REQUEST_SCHEDULE
		WHERE reqschedule_number = #{REQ_CODE}
	</delete>
	
	<!-- 고용주가 직원 퇴사 시키는  -->
	<update id="deletePtj">
		UPDATE PART_TIMER SET
			resignation = 'N'
		WHERE PTJ_CODE = #{PTJ_CODE}
	</update>
	
	<!-- 변경 요청을 하는 근무가 이미 요청중인지 확인  -->
	<select id="checkRequestSchedule" parameterType="String" resultType="hashMap">
		SELECT 
			DC
		FROM REQUEST_SCHEDULE
		WHERE ud_schedule_number = #{schedule_code} AND (ACCEPT_EMP !='D' AND ACCEPT_PTJ != 'D')
	</select>
	
	<!-- 매장 삭제 -->
	<delete id="deleteStore">
		DELETE 
		FROM store
		WHERE store_code = #{STORE_CODE}
	</delete>
	
	
	<!-- 퇴사시 parttimer 삭제 -->
	<delete id="deletePartTimer">
		DELETE 
		FROM PART_TIMER
		WHERE PTJ_CODE = #{PTJ_CODE}
	</delete>
	
	<!-- 퇴사시 workplace 삭제 -->
	<delete id="deleteworkplace">
		DELETE
		FROM WORKPLACE
		WHERE USER_CODE_PTJ = #{USER_CODE_PTJ}
	</delete>
	
	<!-- 고용주가 근무자의 정보 수정  -->
	<update id="updatePartTimer">
		UPDATE PART_TIMER SET
			<if test="COLOR != null and COLOR != '' ">COLOR = #{COLOR},</if>
			<if test="ROLE != null and ROLE != '' ">ROLE = #{ROLE}</if>
		WHERE PTJ_CODE = #{PTJ_CODE}
	</update>
</mapper>